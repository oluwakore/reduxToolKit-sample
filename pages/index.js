import React, {useState, useEffect} from 'react'
import { useRouter } from 'next/router'
import Link from 'next/link'
import Head from 'next/head'
import Image from 'next/image'
import {useDispatch,  useSelector} from 'react-redux'
import styles from '../styles/Home.module.css'
import { Button, Card, Input, Space, message, Modal} from 'antd'
import { deletePost, getPost, updatePost } from '../redux/features/postSlice'
import LoadingCard from '../components/LoadingCard'

export default function Home() {

  const [id, setId] = useState()
  const [values, setValues] = useState({ title: "", body: ""})
  const [isModalOpen, setIsModalOpen] = useState(false);
  const dispatch = useDispatch()
  console.log(id)



  const handleSubmit = (e) => {
    e.preventDefault()
    dispatch(updatePost({ id : post[post.length - 1].id, values }))
    setIsModalOpen(false);
  }

  const showModal = () => {
    setIsModalOpen(true);
    setValues({ title: post[post.length - 1].title, body: post[post.length - 1].body })
  };

  const handleOk = () => {
    setIsModalOpen(false);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
  };

  const postContainer = useSelector((state) => state.posters)

  const { loading, post, edit, body } = postContainer

  

  console.log(post)

  const fetchUserPost = () => {
    if(!id){
      message.error('Please provide user ID!')
    } else {
      dispatch(getPost({id}))
      setId("") 
    }
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>Redux ToolKit Practice</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
  
  <div className={styles.containerNav}>
    <p  style={{ margin: "auto" }}><img src={'/redux.svg'} alt="RTK" width={50} />  React ToolKit Sample</p>
  </div>

     <div style={{ marginTop: 70, width: "90%", margin: "auto" }} >
      <h1>Fetch Post</h1>
      <Input 
      placeholder="Enter User Id"
      type="number"
      value={id}
      onChange={(e) => setId(e.target.value)}
      
      />

      <Space  size="small" style={{ margin: 20 }}>
        <Button type="primary" onClick={fetchUserPost}>
          Get User Post
        </Button>
        <Link href='/create-post'>
        <Button type="dashed">Create User Post</Button>
        </Link>
      </Space>

      {
        loading ? <LoadingCard count={post?.length} /> : (
          <>
          { post?.length > 0 &&
            post?.map((item, index) => (
              <>
              <Card key={index}  type="inner" title={item.title}>
                <p>User Id: {item.id}</p>
                <span> {item.body} </span>
              </Card>
              <Space 
              size="middle"
              style={{ marginTop: 35, marginLeft: 5, float: "right"}}
              >
                <Button style={{ cursor: "pointer" }}   onClick={showModal} >Edit</Button>
                <Button style={{ cursor: "pointer" }} type="primary" danger 
                onClick={() => dispatch(deletePost({id: item.id}))}
                >Delete</Button>
              </Space>
              <Modal title="Edit the post" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} footer={null}>
              <form onSubmit={handleSubmit}>
        <Input
        placeholder='Enter Title'
        type="text"
        onChange={(e) => setValues({ ...values, title: e.target.value})}
        value={values.title}
        />
        <Input.TextArea
        placeholder="Enter Body..."
        onChange={(e) => setValues({ ...values, body: e.target.value})}
        value={values.body}
        size="large"
        style={{ resize: "none", marginTop: 20, height: "10rem" }}
        />
        <Space style={{margin: 10}}>
          <Button type="primary" htmlType="submit" disabled={loading}>Update Post</Button>
        </Space>
      </form>
              </Modal>
              </>
            ))

          }
          </>
        )
      }
     </div>
    </div>
  )
}
